#!/usr/bin/env python3
"""
Helper script to submit candidate theories to the Albert project.
Usage: python submit_candidate.py <candidate_id>
"""

import os
import sys
import subprocess
import argparse
from datetime import datetime

def run_command(cmd, check=True):
    """Run a shell command and return the output."""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=check)
        return result.stdout.strip(), result.stderr.strip(), result.returncode
    except subprocess.CalledProcessError as e:
        return e.stdout.strip(), e.stderr.strip(), e.returncode


def check_git_status():
    """Check if we're in a git repository and if it's clean."""
    stdout, stderr, code = run_command("git status --porcelain")
    if code != 0:
        print("Error: Not in a git repository")
        return False
    
    # Check for uncommitted changes
    if stdout:
        print("Warning: You have uncommitted changes:")
        print(stdout)
        response = input("Continue anyway? (y/N): ")
        if response.lower() != 'y':
            return False
    
    return True


def create_branch(candidate_id):
    """Create a new branch for the candidate."""
    branch_name = f"candidate-{candidate_id}-{datetime.now().strftime('%Y%m%d')}"
    
    # Check if branch already exists
    stdout, stderr, code = run_command(f"git branch --list {branch_name}", check=False)
    if stdout:
        print(f"Branch {branch_name} already exists")
        return None
    
    # Create and checkout new branch
    stdout, stderr, code = run_command(f"git checkout -b {branch_name}")
    if code != 0:
        print(f"Error creating branch: {stderr}")
        return None
    
    print(f"Created and switched to branch: {branch_name}")
    return branch_name


def stage_candidate(candidate_id):
    """Stage the candidate directory for commit."""
    candidate_path = f"physics_agent/theories/candidates/{candidate_id}"
    
    if not os.path.exists(candidate_path):
        print(f"Error: Candidate directory not found: {candidate_path}")
        return False
    
    # Add the candidate directory
    stdout, stderr, code = run_command(f"git add {candidate_path}")
    if code != 0:
        print(f"Error staging files: {stderr}")
        return False
    
    print(f"Staged candidate directory: {candidate_path}")
    return True


def commit_candidate(candidate_id):
    """Commit the candidate with a descriptive message."""
    # Read candidate README if available
    readme_path = f"physics_agent/theories/candidates/{candidate_id}/README.md"
    description = ""
    
    if os.path.exists(readme_path):
        with open(readme_path, 'r') as f:
            lines = f.readlines()
            # Extract first meaningful line after title
            for line in lines[2:]:
                if line.strip() and not line.startswith('#'):
                    description = line.strip()
                    break
    
    commit_msg = f"Add candidate theory {candidate_id}\n\n"
    if description:
        commit_msg += f"{description}\n\n"
    commit_msg += "Generated by the Albert self-discovery system.\n"
    commit_msg += "This candidate has shown promising results and scored in the top 10."
    
    # Commit
    stdout, stderr, code = run_command(f'git commit -m "{commit_msg}"')
    if code != 0:
        print(f"Error committing: {stderr}")
        return False
    
    print("Successfully committed candidate")
    return True


def push_branch(branch_name):
    """Push the branch to origin."""
    stdout, stderr, code = run_command(f"git push -u origin {branch_name}")
    if code != 0:
        print(f"Error pushing branch: {stderr}")
        return False
    
    print(f"Successfully pushed branch: {branch_name}")
    return True


def get_repo_info():
    """Get the GitHub repository information."""
    # Try to get the remote URL
    stdout, stderr, code = run_command("git remote get-url origin", check=False)
    if code != 0:
        return None, None
    
    # Parse GitHub URL
    url = stdout.strip()
    if "github.com" in url:
        # Handle both HTTPS and SSH URLs
        if url.startswith("https://"):
            parts = url.replace("https://github.com/", "").replace(".git", "").split("/")
        elif url.startswith("git@"):
            parts = url.replace("git@github.com:", "").replace(".git", "").split("/")
        else:
            return None, None
        
        if len(parts) >= 2:
            return parts[0], parts[1]
    
    return None, None


def main():
    parser = argparse.ArgumentParser(description="Submit a candidate theory as a pull request")
    parser.add_argument("candidate_id", help="The candidate ID (e.g., c_20240115_abc12345)")
    parser.add_argument("--no-push", action="store_true", help="Create branch and commit but don't push")
    args = parser.parse_args()
    
    candidate_id = args.candidate_id
    
    print(f"Submitting candidate: {candidate_id}")
    print("="*50)
    
    # Check git status
    if not check_git_status():
        return 1
    
    # Create branch
    branch_name = create_branch(candidate_id)
    if not branch_name:
        return 1
    
    # Stage candidate
    if not stage_candidate(candidate_id):
        return 1
    
    # Commit
    if not commit_candidate(candidate_id):
        return 1
    
    # Push (unless --no-push)
    if not args.no_push:
        if not push_branch(branch_name):
            return 1
        
        # Get repo info for PR URL
        owner, repo = get_repo_info()
        if owner and repo:
            pr_url = f"https://github.com/{owner}/{repo}/pull/new/{branch_name}"
            print("\n" + "="*50)
            print("✅ Success! Your candidate is ready for submission.")
            print("\nNext steps:")
            print(f"1. Open this URL to create a pull request:")
            print(f"   {pr_url}")
            print("\n2. Fill out the PR template with:")
            print("   - Description of the theory")
            print("   - Key validation results")
            print("   - Why it's promising")
            print("\n3. Submit the PR for community review")
        else:
            print("\n" + "="*50)
            print("✅ Success! Branch pushed.")
            print("Visit https://github.com/PimDeWitte/albert/pulls to create your PR")
    else:
        print("\n" + "="*50)
        print("✅ Success! Candidate committed locally.")
        print(f"When ready, run: git push -u origin {branch_name}")
    
    return 0


if __name__ == "__main__":
    sys.exit(main()) 